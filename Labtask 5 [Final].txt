#include <iostream>
using namespace std;

const int n = 5;
int queue[n];
int front = -1;
int rear = -1;

void enqueue(int x) {
    if (rear == n - 1) {
        cout << "Overflow: Queue is full." << endl;
    } else {
        if (front == -1) {
            front = 0;
        }
        rear++;
        queue[rear] = x;
        cout << "Enqueued: " << x << endl;
    }
}

void dequeue() {
    if (front == -1) {
        cout << "Underflow: Queue is empty." << endl;
    } else {
        cout << "Dequeued: " << queue[front] << endl;
        front++;
        if (front > rear) {
            // Reset indices when the queue becomes empty
            front = rear = -1;
        }
    }
}

void display() {
    if (front == -1) {
        cout << "Queue Is Empty." << endl;
    } else {
        cout << "Queue elements are (front to rear): ";
        for (int i = front; i <= rear; i++) {
            cout << queue[i] << " ";
        }
        cout << " (Front: " << front << ", Rear: " << rear << ")" << endl;
    }
}

int main() {
    enqueue(1);
    enqueue(2);
    enqueue(3);
    enqueue(4);
    enqueue(5);

    cout << "After Enqueue, queue status: " << endl;
    display();
    cout << endl;

    dequeue();
    dequeue();

    cout << "After Dequeue, queue status: " << endl;
    display();
    cout << endl;

    enqueue(6);
    enqueue(7);
    cout << endl;

    cout << "After Enqueue new elements, queue status: " << endl;
    display();
    cout << endl;

    dequeue();
    dequeue();
    dequeue();
    dequeue();

    cout << "After Dequeue elements, queue status: " << endl;
    display();
    cout << endl;

    return 0;
}
